class Solution {
public:
    bool path(TreeNode* root,TreeNode* target,vector<TreeNode*>& flow){
        if(root==NULL)
           return false;
        flow.push_back(root);

        if(root==target)
           return true;
        if(path(root->left,target,flow) || path(root->right,target,flow))
           return true;
        
        flow.pop_back();
        return false;
           

        
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        vector<TreeNode*>path1;
        vector<TreeNode*>path2;

        path(root,p,path1);
        path(root,q,path2);

        int n1=path1.size();
        int n2= path2.size();
        cout<<"n1="<<n1<<" n2="<<n2<<endl;
        cout<<"path1 element"<<endl;

        for(int i=0;i<n1;i++){
            cout<<path1[i]->val<<" ";

        }
        cout<<endl;
         cout<<"path2 element"<<endl;
         for(int i=0;i<n2;i++){
            cout<<path2[i]->val<<" ";

        }
       cout<<endl;
        int s=min(n1,n2);
        cout<<s<<endl;
        int i=0;
        for(i=0;i<s;i++){
            if(path1[i]!=path2[i])
               break;
        }
        cout<<i;

        return path1[i-1];
    }
};
